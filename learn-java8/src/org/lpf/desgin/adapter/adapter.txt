适配器模式（Adapter）
功能： 讲某个类的接口转换成 客户端期望的另外一种接口表示。
目的： 消除由于接口不匹配所造成的类的兼容性问题。

分类： 类的适配器模式（Class Adapter），对象的适配器模式（Bean Adapter），接口的适配器模式（Interface Adapter）


1.类的适配器模式（Class Adapter）
核心思想：
有一个Source类，拥有一个方法，待适配，目标接口时Targetable，
通过Adapter类（通过继承），将Source的功能扩展到Targetable里


2.对象的适配器模式（object Adapter）
功能： 讲某个类转换为 另外一种接口表示
有一个Source类，拥有一个方法，待适配，目标接口时Targetable，
通过Adapter类持有待适配的类的对象，将Source的功能扩展到Targetable里

3.接口的适配器模式（interface Adapter）
场景：有时我们写的一个接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口的所有方法，
        这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要某一些，此处为了解决这个问题，
        我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接口，实现了所有的方法，而我们不和原始的接口打交道，
        只和该抽象类取得联系，所以我们写一个类，继承该抽象类，重写我们需要的方法就行
功能：用抽象类 把接口中的方法全部实现，提供默认实现， 不和原始的接口打交道，只和抽象类联系


三种适配器的应用场景：
类的适配器模式：当希望将一个类转换为 另外一种接口 时， 可以使用类的适配器模式，创建一个新类 继承原有的类，实现新的接口
（包含原有的类的方法）。
对象的适配器模式：当希望将一个对象转换成另外一种接口的对象 时 ，可以创建一个 Wrapper（包装类） 持有 原有类的一个实例，
在包装类中调用实例的方法。
接口的适配器模式：当不希望实现接口中的所有方法时，可以创建一个 抽象类 abstract Adapter ，实现所有方法，我们写别的 类的时候，
继承抽象类，重写抽象类中的方法。